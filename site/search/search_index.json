{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Javascript is the dominant programming language in web development. Initially, its designed for the web element interaction in web pages. Javascript engine in browser will take care of js code execution in client side. But modern JS can run also in server side (most popular one is nodejs) which makes the javascript as one of the powerful programing language in modern web application development History of Javascript Brendan Eich - Javascript was developed by Netscape developer named Brendan Eich. First name is mocha, then it renamed as Livescript and finally changed to Javascript due to the fame of java at that time JavaScript 1.0 - JavaScript 1.0 was released on 1996 by Netscape JavaScript 1.1 - ECMAScript 1(ES1) - JavaScript 1.1 was released on 1997, with new features like general-purpose, cross-platform, and vendor-neutral scripting language and became an ECMA standard ECMAScript 2(ES2) - ES2 was released on 1998 with editorial changes ECMAScript 3(ES3) - ES3 was released on 1999 with new features like regular expressions, try/catch, switch and do-while ECMAScript 4(ES4) - ES4 was not released ECMAScript 5(ES5) - ES5 was released on 2009 with new features like Json support, Array iteration methods, strict mode etc.. ECMAScript 2015(ES6) - ECMAScript 2015 was released on 2015 with new features like let/const, default parameters values and array find index functionalities ECMAScript 2016(ES6) - ECMAScript 2016 was released on 2016 with new features like exponential operators and array include functionality ECMAScript 2017(ES6) - ECMAScript 2017 was released on 2017 with new features like string padding, object entries, object values, async and shared memory functionalities ECMAScript 2018(ES6) - ECMAScript 2018 was released on 2018 with new features like rest/spread properties, asynchronous iteration, promise finally and RegExp Where we can use javascript? Web Development - Frontend - React Js, Vue.Js and Angular are very popular Javascript frontend framework for client side programming Web Development - Backend - Node Js, Express Js and Meteor Js are very popular Javascript backend framework for server side programming Game Development - Easel Js is a rich graphics javascript library which helps to develop games on the web Mobile Application - React Native, Ionic, Titanium, Jquery mobile are very popular javascript framework for hybrid mobile app development Desktop Application - Electron Js helps to build the cross platform desktop apps using javascript Machine Learning - Tensorflow Js library helps to build the ML Models and Neuro js is an another JavaScript framework for develop reinforcement learning and deep learning models Characteristics of Javascript Light Weight Scripting Language - Light weight is one of the best feature of js since its developed mainly for client-side execution Dynamic Typing - Similar to python, Js also support dynamic typing which means that the declaration of variable data type is not mandatory Objected Oriented - From ES6, object oriented programming concepts has introduced in Javascript. Through which, developers can implement all the OOPS concepts like class, object, encapsulation, inheritance etc.. Platform Independent - Java script supports write once run anywhere concepts. Same code can use in multiple platform without any impact in its output Interpreted Language - Javascript codes are usually interpreted by js interpreter to process the code. But, engine like V8 in chrome are follow just in time compilation to execute javascript code Async Processing - Javascript facilitates async processing which means, it won't wait for the response once request get initiated. Parallel execution will happens and reduce the overall script execution time","title":"Javascript Introduction"},{"location":"#history-of-javascript","text":"Brendan Eich - Javascript was developed by Netscape developer named Brendan Eich. First name is mocha, then it renamed as Livescript and finally changed to Javascript due to the fame of java at that time JavaScript 1.0 - JavaScript 1.0 was released on 1996 by Netscape JavaScript 1.1 - ECMAScript 1(ES1) - JavaScript 1.1 was released on 1997, with new features like general-purpose, cross-platform, and vendor-neutral scripting language and became an ECMA standard ECMAScript 2(ES2) - ES2 was released on 1998 with editorial changes ECMAScript 3(ES3) - ES3 was released on 1999 with new features like regular expressions, try/catch, switch and do-while ECMAScript 4(ES4) - ES4 was not released ECMAScript 5(ES5) - ES5 was released on 2009 with new features like Json support, Array iteration methods, strict mode etc.. ECMAScript 2015(ES6) - ECMAScript 2015 was released on 2015 with new features like let/const, default parameters values and array find index functionalities ECMAScript 2016(ES6) - ECMAScript 2016 was released on 2016 with new features like exponential operators and array include functionality ECMAScript 2017(ES6) - ECMAScript 2017 was released on 2017 with new features like string padding, object entries, object values, async and shared memory functionalities ECMAScript 2018(ES6) - ECMAScript 2018 was released on 2018 with new features like rest/spread properties, asynchronous iteration, promise finally and RegExp","title":"History of Javascript"},{"location":"#where-we-can-use-javascript","text":"Web Development - Frontend - React Js, Vue.Js and Angular are very popular Javascript frontend framework for client side programming Web Development - Backend - Node Js, Express Js and Meteor Js are very popular Javascript backend framework for server side programming Game Development - Easel Js is a rich graphics javascript library which helps to develop games on the web Mobile Application - React Native, Ionic, Titanium, Jquery mobile are very popular javascript framework for hybrid mobile app development Desktop Application - Electron Js helps to build the cross platform desktop apps using javascript Machine Learning - Tensorflow Js library helps to build the ML Models and Neuro js is an another JavaScript framework for develop reinforcement learning and deep learning models","title":"Where we can use javascript?"},{"location":"#characteristics-of-javascript","text":"Light Weight Scripting Language - Light weight is one of the best feature of js since its developed mainly for client-side execution Dynamic Typing - Similar to python, Js also support dynamic typing which means that the declaration of variable data type is not mandatory Objected Oriented - From ES6, object oriented programming concepts has introduced in Javascript. Through which, developers can implement all the OOPS concepts like class, object, encapsulation, inheritance etc.. Platform Independent - Java script supports write once run anywhere concepts. Same code can use in multiple platform without any impact in its output Interpreted Language - Javascript codes are usually interpreted by js interpreter to process the code. But, engine like V8 in chrome are follow just in time compilation to execute javascript code Async Processing - Javascript facilitates async processing which means, it won't wait for the response once request get initiated. Parallel execution will happens and reduce the overall script execution time","title":"Characteristics of Javascript"},{"location":"js_comments/","text":"Javascript comments are used to increase the readability of the code and also helps to prevent the execution of particular code during the code test Types of Comments 1. Single Line Comments 2. Multiline Comments Single Line Comments Use the double forward slash // to write a single-line comment //Single Line Comment console.log(\"I'm print statement with single line comment\") Output I'm print statement with single line comment Multi Line Comments The code between /* and */ are considered as multi line comments in js. Below is the simple example program for multi line comments /* The multiline comment by inserting hash in each line of code */ console.log(\"I'm print statement with Multiline comment\") Output I'm print statement with Multiline comment","title":"Javascript Comments"},{"location":"js_comments/#types-of-comments","text":"1. Single Line Comments 2. Multiline Comments","title":"Types of Comments"},{"location":"js_comments/#single-line-comments","text":"Use the double forward slash // to write a single-line comment //Single Line Comment console.log(\"I'm print statement with single line comment\") Output I'm print statement with single line comment","title":"Single Line Comments"},{"location":"js_comments/#multi-line-comments","text":"The code between /* and */ are considered as multi line comments in js. Below is the simple example program for multi line comments /* The multiline comment by inserting hash in each line of code */ console.log(\"I'm print statement with Multiline comment\") Output I'm print statement with Multiline comment","title":"Multi Line Comments"},{"location":"js_data_types/","text":"Data types specify the different sizes and values that can be stored in the variable. Javascript have various data types that we can use in our javascript programs. Built-In Data Types Numeric Types # Number, BigInt Text Type # String Empty Type # undefined, null Mapping Type # Object Symbol Types # Symbol Boolean Type # Boolean ** Note - you can use any online javascript interpreter to run and test the below js program examples Number Type Integers and floating number can be represented using number datatype in javascript. Below is the sample example program. // Number Data Types let num1 = 100; console.log(typeof(num1), num1); let num2 = 3.14; console.log(typeof(num2), num2) let num3 = 10*20 console.log(typeof(num3), num3) Output number 100 number 3.14 number 200 BigInt Type Number data types allows the numbers only between the range of -9007199254740991 to +9007199254740992. BigInt helps to store the values more than 9007199254740991 by simply appending n to the end of that integer // BigInt Data Type let num1 = 9007199254740993n; console.log(typeof(num1), num1); Output bigint 9007199254740993 String Type Text can be store with the help of string data type. single quotes, double quotes or backticks are used to represent string in Javascript // String Data Type //single quote let name1 = 'Python' console.log(typeof(name1), name1) //double quote let name2 = \"Javascript\" console.log(typeof(name2), name2) //backticks - to include expressions let output = `Learn ${name1} and ${name2}` console.log(output) Output string Python string Javascript Learn Python and Javascript Boolean Type Boolean data types are used to store true or false in the variable for logical operations //Boolean data type is_validated = true console.log(typeof(is_validated), is_validated) is_checked = false console.log(typeof(is_checked), is_checked) Output boolean true boolean false Undefined Type Unassigned values are considers as undefined data type in javascript //Undefined data type let amount; console.log(typeof(amount), amount) Output undefined undefined Null Type Empty values are considers as null Object in javascript //Null data type let amount=null; console.log(typeof(amount), amount) Output object null Symbol Type To achieve immutability, symbol has been introduced from ES6. //Symbol data type let name1=Symbol(\"Js\"); let name2=Symbol(\"Js\") //Even though both have same value, its considered as different objects console.log(name1===name2) console.log(typeof(name1)) Output false symbol Object Type Object type is one of major data type which is like dictionary in python. With the help of key and value pair combination, data can be store and retrieve in javascript //Object data type let data = { name : \"Javascript\", version : \"ES6\", year : \"2016\" } //Access elements using dot walk console.log(data.name) //Access elements using key with square brackets console.log(data[\"year\"]) Output Javascript 2016","title":"Javascript Data Types"},{"location":"js_data_types/#built-in-data-types","text":"Numeric Types # Number, BigInt Text Type # String Empty Type # undefined, null Mapping Type # Object Symbol Types # Symbol Boolean Type # Boolean ** Note - you can use any online javascript interpreter to run and test the below js program examples","title":"Built-In Data Types"},{"location":"js_data_types/#number-type","text":"Integers and floating number can be represented using number datatype in javascript. Below is the sample example program. // Number Data Types let num1 = 100; console.log(typeof(num1), num1); let num2 = 3.14; console.log(typeof(num2), num2) let num3 = 10*20 console.log(typeof(num3), num3) Output number 100 number 3.14 number 200","title":"Number Type"},{"location":"js_data_types/#bigint-type","text":"Number data types allows the numbers only between the range of -9007199254740991 to +9007199254740992. BigInt helps to store the values more than 9007199254740991 by simply appending n to the end of that integer // BigInt Data Type let num1 = 9007199254740993n; console.log(typeof(num1), num1); Output bigint 9007199254740993","title":"BigInt Type"},{"location":"js_data_types/#string-type","text":"Text can be store with the help of string data type. single quotes, double quotes or backticks are used to represent string in Javascript // String Data Type //single quote let name1 = 'Python' console.log(typeof(name1), name1) //double quote let name2 = \"Javascript\" console.log(typeof(name2), name2) //backticks - to include expressions let output = `Learn ${name1} and ${name2}` console.log(output) Output string Python string Javascript Learn Python and Javascript","title":"String Type"},{"location":"js_data_types/#boolean-type","text":"Boolean data types are used to store true or false in the variable for logical operations //Boolean data type is_validated = true console.log(typeof(is_validated), is_validated) is_checked = false console.log(typeof(is_checked), is_checked) Output boolean true boolean false","title":"Boolean Type"},{"location":"js_data_types/#undefined-type","text":"Unassigned values are considers as undefined data type in javascript //Undefined data type let amount; console.log(typeof(amount), amount) Output undefined undefined","title":"Undefined Type"},{"location":"js_data_types/#null-type","text":"Empty values are considers as null Object in javascript //Null data type let amount=null; console.log(typeof(amount), amount) Output object null","title":"Null Type"},{"location":"js_data_types/#symbol-type","text":"To achieve immutability, symbol has been introduced from ES6. //Symbol data type let name1=Symbol(\"Js\"); let name2=Symbol(\"Js\") //Even though both have same value, its considered as different objects console.log(name1===name2) console.log(typeof(name1)) Output false symbol","title":"Symbol Type"},{"location":"js_data_types/#object-type","text":"Object type is one of major data type which is like dictionary in python. With the help of key and value pair combination, data can be store and retrieve in javascript //Object data type let data = { name : \"Javascript\", version : \"ES6\", year : \"2016\" } //Access elements using dot walk console.log(data.name) //Access elements using key with square brackets console.log(data[\"year\"]) Output Javascript 2016","title":"Object Type"},{"location":"js_operators/","text":"Operators are used to perform various mathematical operations on the data value. Operators are used to perform various mathematical operations on the data value Types of Operators 1. Arithmetic operators 2. Comparison operators 3. Logical operators 4. Bitwise operators 5. Assignment operators Arithmetic operators Arithmetic operators are used to perform simple arithmetic operations over the operands //Addition Operation let add_result = 10 + 20 console.log(`Addition Result : ${add_result}`) //Subtraction Operation sub_result = 100 - 50 console.log(`Subtraction Result : ${sub_result}`) //Multiplication Operation multi_result = 10 * 20 console.log(`Multiplication Result : ${multi_result}`) //Division Operation (Decimal Value) div_result = 25 / 10 console.log(`Division Result : ${div_result}`) //Modulus Operation mod_result = 25%10 console.log(`Modulus Result : ${mod_result}`) //Exponential Operation (2*2*2*2*2) exp_result = 2 ** 5 console.log(`Exponential Result : ${exp_result}`) //Increment Operation inc_result = 10 inc_result++ console.log(`Increment Result : ${inc_result}`) //Decrement Operation dec_result = 10 dec_result-- console.log(`Decrement Result : ${dec_result}`) Output Addition Result : 30 Subtraction Result : 50 Multiplication Result : 200 Division Result : 2.5 Modulus Result : 5 Exponential Result : 32 Increment Result : 11 Decrement Result : 9 Comparison operators Comparison operators are used to check for relations between the operands //Equal Operator (Type Ignored) num1=50, num2 = \"50\" if (num1==num2) { console.log(\"Equal\") } //Identical Operator (Should be same type ) num1=50, num2 = 50 if (num1===num2) { console.log(\"Equal\") } //Not Equal Operator num1=50, num2 = \"100\" if (num1!=num2) { console.log(\"Not Equal\") } //Not Identical Operator num1=50, num2 = 100 if (num1!==num2) { console.log(\"Not Equal\") } //Greater than Operator num1=100, num2 = 50 if (num1>num2) { console.log(\"num1 is greater than num2\") } //Lesser than Operator num1=50, num2 = 100 if (num1<num2) { console.log(\"num1 is lesser than num2\") } //Greater than or Equal to Operator num1=50, num2 = 50 if (num1>=num2) { console.log(\"Greater than or Equal to\") } //Lesser than or Equal to Operator num1=50, num2 = 50 if (num1<=num2) { console.log(\"Lesser than or Equal to\") } Output Equal Equal Not Equal Not Equal num1 is greater than num2 num1 is lesser than num2 Greater than or Equal to Lesser than or Equal to Logical operators Logical Operators are used to check conditional expression. We can use these operators in conditional and looping statement for evaluation //AND - Returns True If both conditions are True num = 50 if (num>10 && num<100) { console.log(true) } //OR - Returns True If any one of the conditions is True num = 50 if (num>10 || num<30) { console.log(true) } //NOT - Returns opposite of the result num = 50 if (!(num>100)) { console.log(true) } Output true true true Bitwise operators Bitwise operators are used to perform operations bit by bit Bitwise AND operator num1 = 3 num2 = 5 //BITWISE AND Operator returns 1 if both the bits are 1 console.log( num1&num2 ) Output 1 The result is 1, because 3 is equal to 0011 in binary and 5 is equal to 0101 in binary Now compare each bit between 3 and 5, only last bit are 1 for both, so that alone returns 1 in final result. Hence, 0001 decimal value is 1, that is get printed in final output 0011 = 3 0101 = 5 ---------- 0001 = 1 Bitwise OR operator num1 = 3 num2 = 5 //BITWISE OR Operator returns 1 if anyone of two bits are 1 console.log( num1 | num2 ) Output 7 The result is 7, because 3 is equal to 0011 in binary and 5 is equal to 0101 in binary Now compare each bit between 3 and 5, the last three having latest one of two bits is 1, so that three bits returns 1. Hence, 0111 decimal value is 7, that is get printed in final output 0011 = 3 0101 = 5 ---------- 0111 = 7 Bitwise XOR operator num1 = 3 num2 = 5 //BITWISE XOR Operator returns 1 if both bit are not equal console.log( num1 ^ num2 ) Output 6 The result is 6, because 3 is equal to 0011 in binary and 5 is equal to 0101 in binary Now compare each bit between 3 and 5, only 2nd and 3rd third sets having one of the bit is 1 and other is 0, so that two bits returns 1. Hence, 0111 decimal value is 6, that is get printed in final output 0011 = 3 0101 = 5 ---------- 0110 = 6 Bitwise NOT operator num = 3 //BITWISE NOT Operator returns 1's compliment of the number console.log( ~num ) Output -4 The result is -4, because 3 is equal to 0011 in binary First it add last bit 1+1 = 10 in binary (0 is result and 1 is carry) Second it add second bit 1 with carry 1 which means 1+1 = 10 in binary (0 is result and 1 is carry) Third it add third bit 0 with carry 1 which means 1+0=0 in binary (no carry) Fourth it only have one bit 0 and no carry, so result in 0 Since its a 1's compliment we should have - value for the output decimal, so it gives -0100 as -4 in decimal output. 0011 = 3 - 1 -------------- - 0100 = -4 Left shift operator num = 3 //LEFT SHIFT - Shifting Bit to Leftmost console.log( num<<2 ) Output 12 The result is 12, since the bits are pushing from left to right (2 places movement since we gave <<2 ) 0011 = 3 <<2 ------------ 1100 = 12 Right shift operator num = 8 //RIGHT SHIFT - Shifting Bit to Rightmost console.log( num>>3 ) Output 1 The result is 1, since the bits are pushing from right to left (3 places movement since we gave <<3) 1000 = 8 >>3 ------------- 0001 = 1 Assignment operators Arithmetic operators are used to perform assignment operations over the operands //Assign Operation (=) let assign_result = 10 + 20 console.log(`Assigned Result : ${assign_result}`) //Add and assign (+=) let add_assign = 10 add_assign+=20 console.log(`Add assign Result : ${add_assign}`) //Subtract and assign (-=) let sub_assign = 20 sub_assign-=10 console.log(`Sub assign Result : ${sub_assign}`) //Multiply and assign (*=) let mul_assign = 20 mul_assign*=10 console.log(`Mul assign Result : ${mul_assign}`) //Divide and assign(/=) let div_assign = 20 div_assign/=10 console.log(`Div assign Result : ${div_assign}`) //Modulus and assign(%=) let mod_assign = 22 mod_assign%=10 console.log(`Mod assign Result : ${mod_assign}`) Output Assigned Result : 30 Add assign Result : 30 Sub assign Result : 10 Mul assign Result : 200 Div assign Result : 2 Mod assign Result : 2","title":"Javascript Operators"},{"location":"js_operators/#types-of-operators","text":"1. Arithmetic operators 2. Comparison operators 3. Logical operators 4. Bitwise operators 5. Assignment operators","title":"Types of Operators"},{"location":"js_operators/#arithmetic-operators","text":"Arithmetic operators are used to perform simple arithmetic operations over the operands //Addition Operation let add_result = 10 + 20 console.log(`Addition Result : ${add_result}`) //Subtraction Operation sub_result = 100 - 50 console.log(`Subtraction Result : ${sub_result}`) //Multiplication Operation multi_result = 10 * 20 console.log(`Multiplication Result : ${multi_result}`) //Division Operation (Decimal Value) div_result = 25 / 10 console.log(`Division Result : ${div_result}`) //Modulus Operation mod_result = 25%10 console.log(`Modulus Result : ${mod_result}`) //Exponential Operation (2*2*2*2*2) exp_result = 2 ** 5 console.log(`Exponential Result : ${exp_result}`) //Increment Operation inc_result = 10 inc_result++ console.log(`Increment Result : ${inc_result}`) //Decrement Operation dec_result = 10 dec_result-- console.log(`Decrement Result : ${dec_result}`) Output Addition Result : 30 Subtraction Result : 50 Multiplication Result : 200 Division Result : 2.5 Modulus Result : 5 Exponential Result : 32 Increment Result : 11 Decrement Result : 9","title":"Arithmetic operators"},{"location":"js_operators/#comparison-operators","text":"Comparison operators are used to check for relations between the operands //Equal Operator (Type Ignored) num1=50, num2 = \"50\" if (num1==num2) { console.log(\"Equal\") } //Identical Operator (Should be same type ) num1=50, num2 = 50 if (num1===num2) { console.log(\"Equal\") } //Not Equal Operator num1=50, num2 = \"100\" if (num1!=num2) { console.log(\"Not Equal\") } //Not Identical Operator num1=50, num2 = 100 if (num1!==num2) { console.log(\"Not Equal\") } //Greater than Operator num1=100, num2 = 50 if (num1>num2) { console.log(\"num1 is greater than num2\") } //Lesser than Operator num1=50, num2 = 100 if (num1<num2) { console.log(\"num1 is lesser than num2\") } //Greater than or Equal to Operator num1=50, num2 = 50 if (num1>=num2) { console.log(\"Greater than or Equal to\") } //Lesser than or Equal to Operator num1=50, num2 = 50 if (num1<=num2) { console.log(\"Lesser than or Equal to\") } Output Equal Equal Not Equal Not Equal num1 is greater than num2 num1 is lesser than num2 Greater than or Equal to Lesser than or Equal to","title":"Comparison operators"},{"location":"js_operators/#logical-operators","text":"Logical Operators are used to check conditional expression. We can use these operators in conditional and looping statement for evaluation //AND - Returns True If both conditions are True num = 50 if (num>10 && num<100) { console.log(true) } //OR - Returns True If any one of the conditions is True num = 50 if (num>10 || num<30) { console.log(true) } //NOT - Returns opposite of the result num = 50 if (!(num>100)) { console.log(true) } Output true true true","title":"Logical operators"},{"location":"js_operators/#bitwise-operators","text":"Bitwise operators are used to perform operations bit by bit Bitwise AND operator num1 = 3 num2 = 5 //BITWISE AND Operator returns 1 if both the bits are 1 console.log( num1&num2 ) Output 1 The result is 1, because 3 is equal to 0011 in binary and 5 is equal to 0101 in binary Now compare each bit between 3 and 5, only last bit are 1 for both, so that alone returns 1 in final result. Hence, 0001 decimal value is 1, that is get printed in final output 0011 = 3 0101 = 5 ---------- 0001 = 1 Bitwise OR operator num1 = 3 num2 = 5 //BITWISE OR Operator returns 1 if anyone of two bits are 1 console.log( num1 | num2 ) Output 7 The result is 7, because 3 is equal to 0011 in binary and 5 is equal to 0101 in binary Now compare each bit between 3 and 5, the last three having latest one of two bits is 1, so that three bits returns 1. Hence, 0111 decimal value is 7, that is get printed in final output 0011 = 3 0101 = 5 ---------- 0111 = 7 Bitwise XOR operator num1 = 3 num2 = 5 //BITWISE XOR Operator returns 1 if both bit are not equal console.log( num1 ^ num2 ) Output 6 The result is 6, because 3 is equal to 0011 in binary and 5 is equal to 0101 in binary Now compare each bit between 3 and 5, only 2nd and 3rd third sets having one of the bit is 1 and other is 0, so that two bits returns 1. Hence, 0111 decimal value is 6, that is get printed in final output 0011 = 3 0101 = 5 ---------- 0110 = 6 Bitwise NOT operator num = 3 //BITWISE NOT Operator returns 1's compliment of the number console.log( ~num ) Output -4 The result is -4, because 3 is equal to 0011 in binary First it add last bit 1+1 = 10 in binary (0 is result and 1 is carry) Second it add second bit 1 with carry 1 which means 1+1 = 10 in binary (0 is result and 1 is carry) Third it add third bit 0 with carry 1 which means 1+0=0 in binary (no carry) Fourth it only have one bit 0 and no carry, so result in 0 Since its a 1's compliment we should have - value for the output decimal, so it gives -0100 as -4 in decimal output. 0011 = 3 - 1 -------------- - 0100 = -4 Left shift operator num = 3 //LEFT SHIFT - Shifting Bit to Leftmost console.log( num<<2 ) Output 12 The result is 12, since the bits are pushing from left to right (2 places movement since we gave <<2 ) 0011 = 3 <<2 ------------ 1100 = 12 Right shift operator num = 8 //RIGHT SHIFT - Shifting Bit to Rightmost console.log( num>>3 ) Output 1 The result is 1, since the bits are pushing from right to left (3 places movement since we gave <<3) 1000 = 8 >>3 ------------- 0001 = 1","title":"Bitwise operators"},{"location":"js_operators/#assignment-operators","text":"Arithmetic operators are used to perform assignment operations over the operands //Assign Operation (=) let assign_result = 10 + 20 console.log(`Assigned Result : ${assign_result}`) //Add and assign (+=) let add_assign = 10 add_assign+=20 console.log(`Add assign Result : ${add_assign}`) //Subtract and assign (-=) let sub_assign = 20 sub_assign-=10 console.log(`Sub assign Result : ${sub_assign}`) //Multiply and assign (*=) let mul_assign = 20 mul_assign*=10 console.log(`Mul assign Result : ${mul_assign}`) //Divide and assign(/=) let div_assign = 20 div_assign/=10 console.log(`Div assign Result : ${div_assign}`) //Modulus and assign(%=) let mod_assign = 22 mod_assign%=10 console.log(`Mod assign Result : ${mod_assign}`) Output Assigned Result : 30 Add assign Result : 30 Sub assign Result : 10 Mul assign Result : 200 Div assign Result : 2 Mod assign Result : 2","title":"Assignment operators"},{"location":"js_variables/","text":"Variables are used to store value and call them wherever required in our code Example: let roll_number = 12345 # roll_number is a variable # = is an assignment operator # 12345 is the value stored in roll_number variable Important point on Js variables Var, let, Const and None 4 ways are available to declare variables in javascript When to use var Var keywords are used from 1995 to 2015. After that let and const keywords are introduced to eliminate some bugs in var. But, still old browser only recognize var keyword during code execution When to use let and const Const usually used to declare the constant value which cannot change once declared. Let is used to declare dynamic variables in the program Rules for Variable Creation Lowercase or uppercase or digits or underscore or dollar signs A Variable name can only contain lowercase (a to z) or uppercase (A to Z) or digits (0 to 9) or an underscore (_) or dollar signs($) Letter First A variable name must start with a letter. $ and _ also allowed but its not a good practice Case-Sensitive Variable name is case-sensitive (a = 5, A=6 -> a and A are two different variables in Javascript) No Special Characters or keywords The variable name cannot have reserved keywords and special characters such as !, @, #, % etc.. Multiple Assignment We can assign values to multiple variables in a single line like this let a = 10, b = 20, c=30; //Multiple Assignment with multiple value let a = 10, b = 20, c = 30; console.log(a, b, c) Output 10 20 30","title":"Javascript Variables"},{"location":"js_variables/#important-point-on-js-variables","text":"Var, let, Const and None 4 ways are available to declare variables in javascript When to use var Var keywords are used from 1995 to 2015. After that let and const keywords are introduced to eliminate some bugs in var. But, still old browser only recognize var keyword during code execution When to use let and const Const usually used to declare the constant value which cannot change once declared. Let is used to declare dynamic variables in the program","title":"Important point on Js variables"},{"location":"js_variables/#rules-for-variable-creation","text":"Lowercase or uppercase or digits or underscore or dollar signs A Variable name can only contain lowercase (a to z) or uppercase (A to Z) or digits (0 to 9) or an underscore (_) or dollar signs($) Letter First A variable name must start with a letter. $ and _ also allowed but its not a good practice Case-Sensitive Variable name is case-sensitive (a = 5, A=6 -> a and A are two different variables in Javascript) No Special Characters or keywords The variable name cannot have reserved keywords and special characters such as !, @, #, % etc..","title":"Rules for Variable Creation"},{"location":"js_variables/#multiple-assignment","text":"We can assign values to multiple variables in a single line like this let a = 10, b = 20, c=30; //Multiple Assignment with multiple value let a = 10, b = 20, c = 30; console.log(a, b, c) Output 10 20 30","title":"Multiple Assignment"}]}