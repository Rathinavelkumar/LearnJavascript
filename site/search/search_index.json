{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Javascript is the dominant programming language in web development. Initially, its designed for the web element interaction in web pages. Javascript engine in browser will take care of js code execution in client side. But modern JS can run also in server side (most popular one is nodejs) which makes the javascript as one of the powerful programing language in modern web application development History of Javascript Brendan Eich - Javascript was developed by Netscape developer named Brendan Eich. First name is mocha, then it renamed as Livescript and finally changed to Javascript due to the fame of java at that time JavaScript 1.0 - JavaScript 1.0 was released on 1996 by Netscape JavaScript 1.1 - ECMAScript 1(ES1) - JavaScript 1.1 was released on 1997, with new features like general-purpose, cross-platform, and vendor-neutral scripting language and became an ECMA standard ECMAScript 2(ES2) - ES2 was released on 1998 with editorial changes ECMAScript 3(ES3) - ES3 was released on 1999 with new features like regular expressions, try/catch, switch and do-while ECMAScript 4(ES4) - ES4 was not released ECMAScript 5(ES5) - ES5 was released on 2009 with new features like Json support, Array iteration methods, strict mode etc.. ECMAScript 2015(ES6) - ECMAScript 2015 was released on 2015 with new features like let/const, default parameters values and array find index functionalities ECMAScript 2016(ES6) - ECMAScript 2016 was released on 2016 with new features like exponential operators and array include functionality ECMAScript 2017(ES6) - ECMAScript 2017 was released on 2017 with new features like string padding, object entries, object values, async and shared memory functionalities ECMAScript 2018(ES6) - ECMAScript 2018 was released on 2018 with new features like rest/spread properties, asynchronous iteration, promise finally and RegExp Where we can use javascript? Web Development - Frontend - React Js, Vue.Js and Angular are very popular Javascript frontend framework for client side programming Web Development - Backend - Node Js, Express Js and Meteor Js are very popular Javascript backend framework for server side programming Game Development - Easel Js is a rich graphics javascript library which helps to develop games on the web Mobile Application - React Native, Ionic, Titanium, Jquery mobile are very popular javascript framework for hybrid mobile app development Desktop Application - Electron Js helps to build the cross platform desktop apps using javascript Machine Learning - Tensorflow Js library helps to build the ML Models and Neuro js is an another JavaScript framework for develop reinforcement learning and deep learning models Characteristics of Javascript Light Weight Scripting Language - Light weight is one of the best feature of js since its developed mainly for client-side execution Dynamic Typing - Similar to python, Js also support dynamic typing which means that the declaration of variable data type is not mandatory Objected Oriented - From ES6, object oriented programming concepts has introduced in Javascript. Through which, developers can implement all the OOPS concepts like class, object, encapsulation, inheritance etc.. Platform Independent - Java script supports write once run anywhere concepts. Same code can use in multiple platform without any impact in its output Interpreted Language - Javascript codes are usually interpreted by js interpreter to process the code. But, engine like V8 in chrome are follow just in time compilation to execute javascript code Async Processing - Javascript facilitates async processing which means, it won't wait for the response once request get initiated. Parallel execution will happens and reduce the overall script execution time","title":"Javascript Introduction"},{"location":"#history-of-javascript","text":"Brendan Eich - Javascript was developed by Netscape developer named Brendan Eich. First name is mocha, then it renamed as Livescript and finally changed to Javascript due to the fame of java at that time JavaScript 1.0 - JavaScript 1.0 was released on 1996 by Netscape JavaScript 1.1 - ECMAScript 1(ES1) - JavaScript 1.1 was released on 1997, with new features like general-purpose, cross-platform, and vendor-neutral scripting language and became an ECMA standard ECMAScript 2(ES2) - ES2 was released on 1998 with editorial changes ECMAScript 3(ES3) - ES3 was released on 1999 with new features like regular expressions, try/catch, switch and do-while ECMAScript 4(ES4) - ES4 was not released ECMAScript 5(ES5) - ES5 was released on 2009 with new features like Json support, Array iteration methods, strict mode etc.. ECMAScript 2015(ES6) - ECMAScript 2015 was released on 2015 with new features like let/const, default parameters values and array find index functionalities ECMAScript 2016(ES6) - ECMAScript 2016 was released on 2016 with new features like exponential operators and array include functionality ECMAScript 2017(ES6) - ECMAScript 2017 was released on 2017 with new features like string padding, object entries, object values, async and shared memory functionalities ECMAScript 2018(ES6) - ECMAScript 2018 was released on 2018 with new features like rest/spread properties, asynchronous iteration, promise finally and RegExp","title":"History of Javascript"},{"location":"#where-we-can-use-javascript","text":"Web Development - Frontend - React Js, Vue.Js and Angular are very popular Javascript frontend framework for client side programming Web Development - Backend - Node Js, Express Js and Meteor Js are very popular Javascript backend framework for server side programming Game Development - Easel Js is a rich graphics javascript library which helps to develop games on the web Mobile Application - React Native, Ionic, Titanium, Jquery mobile are very popular javascript framework for hybrid mobile app development Desktop Application - Electron Js helps to build the cross platform desktop apps using javascript Machine Learning - Tensorflow Js library helps to build the ML Models and Neuro js is an another JavaScript framework for develop reinforcement learning and deep learning models","title":"Where we can use javascript?"},{"location":"#characteristics-of-javascript","text":"Light Weight Scripting Language - Light weight is one of the best feature of js since its developed mainly for client-side execution Dynamic Typing - Similar to python, Js also support dynamic typing which means that the declaration of variable data type is not mandatory Objected Oriented - From ES6, object oriented programming concepts has introduced in Javascript. Through which, developers can implement all the OOPS concepts like class, object, encapsulation, inheritance etc.. Platform Independent - Java script supports write once run anywhere concepts. Same code can use in multiple platform without any impact in its output Interpreted Language - Javascript codes are usually interpreted by js interpreter to process the code. But, engine like V8 in chrome are follow just in time compilation to execute javascript code Async Processing - Javascript facilitates async processing which means, it won't wait for the response once request get initiated. Parallel execution will happens and reduce the overall script execution time","title":"Characteristics of Javascript"},{"location":"js_comments/","text":"Javascript comments are used to increase the readability of the code and also helps to prevent the execution of particular code during the code test Types of Comments 1. Single Line Comments 2. Multiline Comments Single Line Comments Use the double forward slash // to write a single-line comment //Single Line Comment console.log(\"I'm print statement with single line comment\") Output I'm print statement with single line comment Multi Line Comments The code between /* and */ are considered as multi line comments in js. Below is the simple example program for multi line comments /* The multiline comment by inserting hash in each line of code */ console.log(\"I'm print statement with Multiline comment\") Output I'm print statement with Multiline comment","title":"Javascript Comments"},{"location":"js_comments/#types-of-comments","text":"1. Single Line Comments 2. Multiline Comments","title":"Types of Comments"},{"location":"js_comments/#single-line-comments","text":"Use the double forward slash // to write a single-line comment //Single Line Comment console.log(\"I'm print statement with single line comment\") Output I'm print statement with single line comment","title":"Single Line Comments"},{"location":"js_comments/#multi-line-comments","text":"The code between /* and */ are considered as multi line comments in js. Below is the simple example program for multi line comments /* The multiline comment by inserting hash in each line of code */ console.log(\"I'm print statement with Multiline comment\") Output I'm print statement with Multiline comment","title":"Multi Line Comments"},{"location":"js_data_types/","text":"Data types specify the different sizes and values that can be stored in the variable. Javascript have various data types that we can use in our javascript programs. Built-In Data Types Numeric Types # Number, BigInt Text Type # String Empty Type # undefined, null Mapping Type # Object Symbol Types # Symbol Boolean Type # Boolean ** Note - you can use any online javascript interpreter to run and test the below js program examples Number Type Integers and floating number can be represented using number datatype in javascript. Below is the sample example program. // Number Data Types let num1 = 100; console.log(typeof(num1), num1); let num2 = 3.14; console.log(typeof(num2), num2) let num3 = 10*20 console.log(typeof(num3), num3) Output number 100 number 3.14 number 200 BigInt Type Number data types allows the numbers only between the range of -9007199254740991 to +9007199254740992. BigInt helps to store the values more than 9007199254740991 by simply appending n to the end of that integer // BigInt Data Type let num1 = 9007199254740993n; console.log(typeof(num1), num1); Output bigint 9007199254740993 String Type Text can be store with the help of string data type. single quotes, double quotes or backticks are used to represent string in Javascript // String Data Type //single quote let name1 = 'Python' console.log(typeof(name1), name1) //double quote let name2 = \"Javascript\" console.log(typeof(name2), name2) //backticks - to include expressions let output = `Learn ${name1} and ${name2}` console.log(output) Output string Python string Javascript Learn Python and Javascript Boolean Type Boolean data types are used to store true or false in the variable for logical operations //Boolean data type is_validated = true console.log(typeof(is_validated), is_validated) is_checked = false console.log(typeof(is_checked), is_checked) Output boolean true boolean false Undefined Type Unassigned values are considers as undefined data type in javascript //Undefined data type let amount; console.log(typeof(amount), amount) Output undefined undefined Null Type Empty values are considers as null Object in javascript //Null data type let amount=null; console.log(typeof(amount), amount) Output object null Symbol Type To achieve immutability, symbol has been introduced from ES6. //Symbol data type let name1=Symbol(\"Js\"); let name2=Symbol(\"Js\") //Even though both have same value, its considered as different objects console.log(name1===name2) console.log(typeof(name1)) Output false symbol Object Type Object type is one of major data type which is like dictionary in python. With the help of key and value pair combination, data can be store and retrieve in javascript //Object data type let data = { name : \"Javascript\", version : \"ES6\", year : \"2016\" } //Access elements using dot walk console.log(data.name) //Access elements using key with square brackets console.log(data[\"year\"]) Output Javascript 2016","title":"Javascript Data Types"},{"location":"js_data_types/#built-in-data-types","text":"Numeric Types # Number, BigInt Text Type # String Empty Type # undefined, null Mapping Type # Object Symbol Types # Symbol Boolean Type # Boolean ** Note - you can use any online javascript interpreter to run and test the below js program examples","title":"Built-In Data Types"},{"location":"js_data_types/#number-type","text":"Integers and floating number can be represented using number datatype in javascript. Below is the sample example program. // Number Data Types let num1 = 100; console.log(typeof(num1), num1); let num2 = 3.14; console.log(typeof(num2), num2) let num3 = 10*20 console.log(typeof(num3), num3) Output number 100 number 3.14 number 200","title":"Number Type"},{"location":"js_data_types/#bigint-type","text":"Number data types allows the numbers only between the range of -9007199254740991 to +9007199254740992. BigInt helps to store the values more than 9007199254740991 by simply appending n to the end of that integer // BigInt Data Type let num1 = 9007199254740993n; console.log(typeof(num1), num1); Output bigint 9007199254740993","title":"BigInt Type"},{"location":"js_data_types/#string-type","text":"Text can be store with the help of string data type. single quotes, double quotes or backticks are used to represent string in Javascript // String Data Type //single quote let name1 = 'Python' console.log(typeof(name1), name1) //double quote let name2 = \"Javascript\" console.log(typeof(name2), name2) //backticks - to include expressions let output = `Learn ${name1} and ${name2}` console.log(output) Output string Python string Javascript Learn Python and Javascript","title":"String Type"},{"location":"js_data_types/#boolean-type","text":"Boolean data types are used to store true or false in the variable for logical operations //Boolean data type is_validated = true console.log(typeof(is_validated), is_validated) is_checked = false console.log(typeof(is_checked), is_checked) Output boolean true boolean false","title":"Boolean Type"},{"location":"js_data_types/#undefined-type","text":"Unassigned values are considers as undefined data type in javascript //Undefined data type let amount; console.log(typeof(amount), amount) Output undefined undefined","title":"Undefined Type"},{"location":"js_data_types/#null-type","text":"Empty values are considers as null Object in javascript //Null data type let amount=null; console.log(typeof(amount), amount) Output object null","title":"Null Type"},{"location":"js_data_types/#symbol-type","text":"To achieve immutability, symbol has been introduced from ES6. //Symbol data type let name1=Symbol(\"Js\"); let name2=Symbol(\"Js\") //Even though both have same value, its considered as different objects console.log(name1===name2) console.log(typeof(name1)) Output false symbol","title":"Symbol Type"},{"location":"js_data_types/#object-type","text":"Object type is one of major data type which is like dictionary in python. With the help of key and value pair combination, data can be store and retrieve in javascript //Object data type let data = { name : \"Javascript\", version : \"ES6\", year : \"2016\" } //Access elements using dot walk console.log(data.name) //Access elements using key with square brackets console.log(data[\"year\"]) Output Javascript 2016","title":"Object Type"}]}